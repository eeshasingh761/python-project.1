# ⁠How can you store data persistently using files or a database in Python?

# Ask how many users to enter
num_users = int(input("How many users do you want to enter? "))

# Open file to write
with open("user_data.txt", "w") as file:
    for i in range(num_users):
        name = input("Enter name: ")
        age = input("Enter age: ")
        email = input("Enter email: ")
        file.write(f"{name},{age},{email}\n")

# Read and print the data from file
print("\nSaved Users in File:")
with open("user_data.txt", "r") as file:
    for line in file:
        print(line.strip())


# What are the benefits of using OOP (Object-Oriented Programming) in this project?

Benefits of Using OOP in this Project
Using Object-Oriented Programming (OOP) in this project can provide several benefits:

#1.⁠ ⁠Encapsulation: You can create a ⁠ User ⁠ class to encapsulate the user's data (name, age, email) and behavior (e.g., validating user input).
#2.⁠ ⁠Reusability: A ⁠ User ⁠ class can be reused in other parts of the project or even in other projects, reducing code duplication.
#3.⁠ ⁠Easier Maintenance: With OOP, it's easier to modify or extend the code without affecting other parts of the project.
#4.⁠ ⁠Improved Readability: OOP can make the code more readable by organizing it into logical classes and methods.

Here's an example of how i implement a ⁠ User ⁠ class:

class User:
    def __init__(self, name, age, email):
        self.name = name
        self.age = age
        self.email = email

    def __str__(self):
        return f"{self.name},{self.age},{self.email}"

num_users = int(input("How many users do you want to enter? "))

users = []
for i in range(num_users):
    name = input("Enter name: ")
    age = input("Enter age: ")
    email = input("Enter email: ")
    user = User(name, age, email)
    users.append(user)

with open("user_data.txt", "w") as file:
    for user in users:
        file.write(str(user) + "\n")

print("\nSaved Users in File:")
with open("user_data.txt", "r") as file:
    for line in file:
        print(line.strip())

# By using OOP, you can make the code more organized, maintainable, and scalable.